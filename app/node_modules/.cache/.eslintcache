[{"D:\\Projects\\Task-Manager\\app\\src\\index.tsx":"1","D:\\Projects\\Task-Manager\\app\\src\\reportWebVitals.ts":"2","D:\\Projects\\Task-Manager\\app\\src\\App.tsx":"3","D:\\Projects\\Task-Manager\\app\\src\\components\\new-task\\NewTaskModal.tsx":"4","D:\\Projects\\Task-Manager\\app\\src\\components\\task-wrapper\\TaskWrapper.tsx":"5","D:\\Projects\\Task-Manager\\app\\src\\components\\button\\Button.tsx":"6","D:\\Projects\\Task-Manager\\app\\src\\components\\edit-task\\EditTaskModal.tsx":"7","D:\\Projects\\Task-Manager\\app\\src\\components\\modal\\Modal.tsx":"8","D:\\Projects\\Task-Manager\\app\\src\\components\\common\\StoreContext.tsx":"9","D:\\Projects\\Task-Manager\\app\\src\\components\\common\\Store.tsx":"10","D:\\Projects\\Task-Manager\\app\\src\\components\\task\\Task.tsx":"11"},{"size":630,"mtime":1643034488597,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1643028830295,"results":"14","hashOfConfig":"13"},{"size":2582,"mtime":1643072347971,"results":"15","hashOfConfig":"13"},{"size":1950,"mtime":1643072347979,"results":"16","hashOfConfig":"13"},{"size":1258,"mtime":1643072347980,"results":"17","hashOfConfig":"13"},{"size":388,"mtime":1643028830284,"results":"18","hashOfConfig":"13"},{"size":3153,"mtime":1643072347976,"results":"19","hashOfConfig":"13"},{"size":575,"mtime":1643028830288,"results":"20","hashOfConfig":"13"},{"size":482,"mtime":1643035791396,"results":"21","hashOfConfig":"13"},{"size":840,"mtime":1643072347972,"results":"22","hashOfConfig":"13"},{"size":472,"mtime":1643072360037,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1wo87nk",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\Task-Manager\\app\\src\\index.tsx",[],["49","50"],"D:\\Projects\\Task-Manager\\app\\src\\reportWebVitals.ts",[],"D:\\Projects\\Task-Manager\\app\\src\\App.tsx",["51","52","53","54"],"D:\\Projects\\Task-Manager\\app\\src\\components\\new-task\\NewTaskModal.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\task-wrapper\\TaskWrapper.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\button\\Button.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\edit-task\\EditTaskModal.tsx",["55"],"import { useEffect, useState } from \"react\";\r\nimport { Button } from \"../button/Button\";\r\nimport { useStore } from \"../common/StoreContext\";\r\nimport { Modal } from \"../modal/Modal\";\r\nimport styles from './EditTaskModal.module.scss'\r\n\r\n\r\ninterface Props{\r\n    onClose : Function,\r\n    users : Array<string>,\r\n    titleValue : string,\r\n    descriptionValue : string,\r\n    assigneeValue : string,\r\n    statusValue : string\r\n}\r\n\r\n\r\nexport const EditTaskModal : React.FC<Props> = ({onClose, users, titleValue, descriptionValue, assigneeValue, statusValue}) => {    \r\n    \r\n    const [title, setTitle] = useState(titleValue);\r\n    const [description, setDescription] = useState(descriptionValue);\r\n    const [assignee, setAssignee] = useState(assigneeValue);\r\n    const [status, setStatus] = useState(statusValue)\r\n\r\n    const store = useStore();\r\n\r\n    const task = JSON.parse(JSON.stringify(store.findTaskByTitle(titleValue)));\r\n    \r\n    let newTask = task[0];\r\n    useEffect(() => {\r\n            newTask = {\r\n                id : task[0].id,\r\n                title : title,\r\n                description : description,\r\n                assignee : assignee,\r\n                status : status\r\n            }\r\n    }, [title, description, assignee, status])\r\n\r\n    const content = \r\n    <div className={styles['content-wrapper']}>\r\n        <div className={styles['content-row']}>\r\n            <h3>Title:</h3>\r\n            <input type=\"text\" value={title} onChange={(e) => {\r\n                setTitle(e.target.value);\r\n            }}/>\r\n        </div>\r\n        <div className={styles['content-row']}>\r\n            <h3>Description:</h3>\r\n            <textarea value={description} onChange={(e) => {\r\n                setDescription(e.target.value);\r\n                \r\n            }}/>\r\n        </div>\r\n        <div className={styles['content-row']}>\r\n            <h3>Assignee:</h3>\r\n            <select onChange={(e) => {\r\n                setAssignee(e.target.value)\r\n            }} value={assignee}>\r\n                {users.map(user => {\r\n                    return(\r\n                        <option value={user} key={user}>{user}</option>\r\n                    )\r\n                })}\r\n            </select>\r\n        </div>\r\n        <div className={styles['content-row']}>\r\n            <h3>Status:</h3>\r\n            <select onChange={(e) => {\r\n                setStatus(e.target.value)\r\n            }} value={status}>\r\n                <option value={'To Do'} key={'To Do'} disabled={statusValue == 'Done'}>{'To Do'}</option>\r\n                <option value={'In Progress'} key={'In Progress'} disabled={statusValue == 'Done'}>{'In Progress'}</option>\r\n                <option value={'Done'} key={'Done'} disabled={statusValue == 'To Do'}>{'Done'}</option>\r\n            </select>\r\n        </div>\r\n    </div>;\r\n\r\n    const actions = <div className={styles.buttons}>\r\n        <Button onAction={() => {onClose()}} title={'Close'}/>\r\n        <Button onAction={() => {store.editTask(task[0], newTask);onClose()}} title={'Edit'}/>\r\n    </div>\r\n    return(\r\n        <div>\r\n            <Modal title='Edit task' content={content} actions={actions}/>\r\n        </div>\r\n    )\r\n}","D:\\Projects\\Task-Manager\\app\\src\\components\\modal\\Modal.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\common\\StoreContext.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\common\\Store.tsx",["56"],"export function Store(){\r\n    return{\r\n        tasks: [] as any,\r\n        edit: {} as any,\r\n        addTask(title : string, description : string, assignee : string){\r\n            const task = {\r\n                id : `DOC-${this.tasks.length + 1}`,\r\n                title,\r\n                description,\r\n                assignee,\r\n                status : 'To Do'\r\n            }\r\n            this.tasks.push(task);\r\n        },\r\n        findTaskByTitle(title : string){\r\n            const copy = this.tasks.slice()\r\n            return copy.filter((item :any) => item.title == title)\r\n        },\r\n        editTask(task : any, newTask : any){\r\n            console.log(newTask);\r\n            \r\n            this.tasks.splice(Number(task.id.split('-')[1]) - 1, 1, newTask)\r\n            console.log(JSON.stringify(this.tasks));\r\n        }\r\n    }\r\n}","D:\\Projects\\Task-Manager\\app\\src\\components\\task\\Task.tsx",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":15},{"ruleId":"61","severity":1,"message":"65","line":18,"column":10,"nodeType":"63","messageId":"64","endLine":18,"endColumn":21},{"ruleId":"61","severity":1,"message":"66","line":18,"column":23,"nodeType":"63","messageId":"64","endLine":18,"endColumn":37},{"ruleId":"67","severity":1,"message":"68","line":32,"column":6,"nodeType":"69","endLine":32,"endColumn":32,"suggestions":"70"},{"ruleId":"61","severity":1,"message":"71","line":20,"column":12,"nodeType":"63","messageId":"64","endLine":20,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":17,"column":58,"nodeType":"74","messageId":"75","endLine":17,"endColumn":60},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'taskForEdit' is assigned a value but never used.","'setTaskForEdit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store.tasks'. Either include it or remove the dependency array.","ArrayExpression",["78"],"'assignee' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [onOpenCreate, onOpenEdit, store.tasks]",{"range":"81","text":"82"},[1290,1316],"[onOpenCreate, onOpenEdit, store.tasks]"]