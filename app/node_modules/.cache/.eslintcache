[{"D:\\Projects\\Task-Manager\\app\\src\\index.tsx":"1","D:\\Projects\\Task-Manager\\app\\src\\reportWebVitals.ts":"2","D:\\Projects\\Task-Manager\\app\\src\\App.tsx":"3","D:\\Projects\\Task-Manager\\app\\src\\components\\new-task\\NewTaskModal.tsx":"4","D:\\Projects\\Task-Manager\\app\\src\\components\\task-wrapper\\TaskWrapper.tsx":"5","D:\\Projects\\Task-Manager\\app\\src\\components\\button\\Button.tsx":"6","D:\\Projects\\Task-Manager\\app\\src\\components\\edit-task\\EditTaskModal.tsx":"7","D:\\Projects\\Task-Manager\\app\\src\\components\\modal\\Modal.tsx":"8","D:\\Projects\\Task-Manager\\app\\src\\components\\common\\StoreContext.tsx":"9","D:\\Projects\\Task-Manager\\app\\src\\components\\common\\Store.tsx":"10"},{"size":630,"mtime":1643034488597,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1643028830295,"results":"13","hashOfConfig":"12"},{"size":1889,"mtime":1643035992474,"results":"14","hashOfConfig":"12"},{"size":1297,"mtime":1643028830291,"results":"15","hashOfConfig":"12"},{"size":710,"mtime":1643028830293,"results":"16","hashOfConfig":"12"},{"size":388,"mtime":1643028830284,"results":"17","hashOfConfig":"12"},{"size":1918,"mtime":1643028830286,"results":"18","hashOfConfig":"12"},{"size":575,"mtime":1643028830288,"results":"19","hashOfConfig":"12"},{"size":482,"mtime":1643035791396,"results":"20","hashOfConfig":"12"},{"size":456,"mtime":1643035811398,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wo87nk",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\Task-Manager\\app\\src\\index.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\reportWebVitals.ts",[],"D:\\Projects\\Task-Manager\\app\\src\\App.tsx",["44"],"import { useState } from 'react';\r\nimport styles from './App.module.scss'\r\nimport { Modal } from './components/modal/Modal';\r\nimport { Button } from './components/button/Button';\r\nimport { TaskWrapper } from './components/task-wrapper/TaskWrapper';\r\nimport { NewTaskModal } from './components/new-task/NewTaskModal';\r\nimport { EditTaskModal } from './components/edit-task/EditTaskModal';\r\nimport { useStore } from './components/common/StoreContext';\r\n\r\nfunction App() {\r\n  const [onOpenCreate, setOnOpenCreate] = useState(false);\r\n  const [onOpenEdit, setOnOpenEdit] = useState(false);\r\n  const store = useStore();\r\n  // store.addTask('title', 'description', 'test')\r\n  // store.addTask('title2', 'description2', 'test2')\r\n  console.log(store.tasks.forEach((element: any) => {\r\n    let item = JSON.parse(JSON.stringify(element))\r\n    console.log(item.id);\r\n    \r\n  }));\r\n  \r\n  const users = ['Ivan', 'Georgi', 'Peter']\r\n  return (\r\n    <div>\r\n      <div className={!onOpenCreate && !onOpenEdit ? styles.wrapper : styles['wrapper-blur']}>\r\n          <TaskWrapper title={\"To Do\"} content={{'test' : 1}}/>\r\n          <TaskWrapper title={\"In progress\"} content={{'test' : 1}}/>\r\n          <TaskWrapper title={\"Done\"} content={{'test' : 1}}/>\r\n          <Button onAction={() => {setOnOpenCreate(true);}} title={'New task'}/>\r\n      </div>\r\n      <div className={styles.modal}>\r\n        {onOpenCreate &&\r\n          <NewTaskModal onAddTask={() => {console.log('add');}}\r\n          onClose={() => {setOnOpenCreate(false)}}\r\n          users={users}\r\n          />\r\n        }\r\n        {onOpenEdit &&\r\n        <EditTaskModal onAddTask={() => {console.log('add');}}\r\n          onClose={() => {setOnOpenEdit(false)}}\r\n          users={users}\r\n          titleValue={'Header'}\r\n          descriptionValue={'description'}\r\n          />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Projects\\Task-Manager\\app\\src\\components\\new-task\\NewTaskModal.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\task-wrapper\\TaskWrapper.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\button\\Button.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\edit-task\\EditTaskModal.tsx",["45"],"import { useState } from \"react\";\r\nimport { Button } from \"../button/Button\";\r\nimport { Modal } from \"../modal/Modal\";\r\nimport styles from './EditTaskModal.module.scss'\r\n\r\n\r\ninterface Props{\r\n    onAddTask : Function,\r\n    onClose : Function,\r\n    users : Array<string>,\r\n    titleValue : string,\r\n    descriptionValue : string\r\n}\r\n\r\n\r\nexport const EditTaskModal : React.FC<Props> = ({onAddTask, onClose, users, titleValue, descriptionValue}) => {    \r\n    \r\n    const [title, setTitle] = useState(titleValue);\r\n    const [description, setDescription] = useState(descriptionValue);\r\n    const [assignee, setAssignee] = useState('');\r\n\r\n    const content = \r\n    <div className={styles['content-wrapper']}>\r\n        <div className={styles['content-row']}>\r\n            <h3>Title:</h3>\r\n            <input type=\"text\" value={title} onChange={(e) => {\r\n                setTitle(e.target.value);\r\n            }}/>\r\n        </div>\r\n        <div className={styles['content-row']}>\r\n            <h3>Description:</h3>\r\n            <textarea value={description} onChange={(e) => {\r\n                setDescription(e.target.value);\r\n                \r\n            }}/>\r\n        </div>\r\n        <div className={styles['content-row']}>\r\n            <h3>Assignee:</h3>\r\n            <select onChange={(e) => {\r\n                setAssignee(e.target.value)\r\n            }}>\r\n                {users.map(user => {\r\n                    return(\r\n                        <option value={user} key={user}>{user}</option>\r\n                    )\r\n                })}\r\n            </select>\r\n        </div>\r\n    </div>;\r\n\r\n    const actions = <div className={styles.buttons}>\r\n        <Button onAction={() => {onClose()}} title={'Close'}/>\r\n        <Button onAction={() => {onAddTask()}} title={'Edit'}/>\r\n    </div>\r\n    return(\r\n        <div>\r\n            <Modal title='Edit task' content={content} actions={actions}/>\r\n        </div>\r\n    )\r\n}","D:\\Projects\\Task-Manager\\app\\src\\components\\modal\\Modal.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\common\\StoreContext.tsx",[],"D:\\Projects\\Task-Manager\\app\\src\\components\\common\\Store.tsx",[],{"ruleId":"46","severity":1,"message":"47","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":15},{"ruleId":"46","severity":1,"message":"50","line":20,"column":12,"nodeType":"48","messageId":"49","endLine":20,"endColumn":20},"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'assignee' is assigned a value but never used."]